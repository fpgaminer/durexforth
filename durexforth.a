;{{{ The MIT License
;
;Copyright (c) 2008-2013 Johan Kotlinski, Mats Andren
;
;Permission is hereby granted, free of charge, to any person obtaining a copy
;of this software and associated documentation files (the "Software"), to deal
;in the Software without restriction, including without limitation the rights
;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;copies of the Software, and to permit persons to whom the Software is
;furnished to do so, subject to the following conditions:
;
;The above copyright notice and this permission notice shall be included in
;all copies or substantial portions of the Software.
;
;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
;THE SOFTWARE. }}}

; ACME assembler

!cpu 6510
!to "durexforth.prg", cbm	; set output file and format

F_IMMED = $80
F_HIDDEN = $40
STRLEN_MASK = $3f

BASIC_INPUT_BUFFER = $200

; zeropage
STACK_START = $86 ; Leaves 86-87 unused to reduce risk of underflow crashes!
TMP = $88
TMP2 = $8a
TMP3 = $8c
IP = $8e

OP_JSR = $20
OP_RTS = $60
OP_LDA_I = $a9
OP_STA_AX = $9d

GETCHR = $ffe4 ; get char from kbd
PUTCHR = $ffd2 ; put char

; disk i/o
READST = $ffb7
SETLFS = $ffba
SETNAM = $ffbd
OPEN = $ffc0
CLOSE = $ffc3
CHKIN = $ffc6
CHKOUT = $ffc9
CLRCHN = $ffcc
CHRIN = $ffcf
CHROUT = $ffd2
LOAD = $ffd5
SAVE = $ffd8

CURSOR_COLOR = $286

K_F1 = $85
K_F3 = $86
K_BACKSPACE = $14
K_RETURN = $d
K_CLRSCR = $93
K_SPACE = ' '
K_REVERSE = $c7
K_DOWN = $11
K_RIGHT = $1d
K_UP = $91
K_LEFT = $9d

C_YELLOW = 7

; -------- program start

*= $801 ; start at c64 basic start

!byte $b, $08, $EF, $00, $9E, $32, $30, $36,$31, $00, $00, $00 ; basic header

!ct pet

!macro NEXT {
    jmp	NEXT_IMPL
}

    ; set up restore key
    sei
    lda	#<restore_handler
    sta $318
    lda	#>restore_handler
    sta $319
    cli

    ; clrscr
    lda #K_CLRSCR
    jsr PUTCHR

    lda	#%00010110 ; lowercase
    sta	$d018

    lda	_START + 1
    bne	reset
    ; first time ever app is started...
    jsr	load_base

reset_print_ok
    lda	#<print_ok
    sta	_START
    lda	#>print_ok
    sta	_START + 1

reset
    lda	#C_YELLOW
    sta	CURSOR_COLOR

    ldx	#0
    stx BASIC_INPUT_BUFFER
    stx	$d020
    stx	$d021

    ; Clears color area.
-	sta $d800, x
    sta $d900, x
    sta $da00, x
    sta $db00, x
    dex
    bne	-

    lda	#<_START
    sta IP
    lda #>_START
    sta IP + 1

    ldx	#STACK_START
    +NEXT

print_ok
    lda	#'o'
    jsr	PUTCHR
    lda	#'k'
    jsr	PUTCHR
    lda	#$d
    jsr	PUTCHR
    +NEXT

restore_handler
    cli
    jmp reset_print_ok

; ----------- macros

!set LINK = 0

!macro BACKLINK {
    !word	LINK
    !set	LINK = * - 2
}

    +BACKLINK
    !byte 6
    !text	"pushya"
pushya
    dex
    dex
    sta	0, x
    sty	1, x
    +NEXT

!macro VALUE .word {
    lda	#<.word
    ldy	#>.word
    jmp pushya
}

; ---------- words

__DOCOL
    lda	IP
    sta	TMP
    ldy	IP + 1

    pla
    sta	IP
    pla
    sta	IP + 1

    ; adjust for weird return address after jsr...
    inc	IP
    bne +
    inc	IP + 1
+

    ; push old IP to return stack
    lda	TMP
    pha
    tya
    pha

    ; fall through...

NEXT_IMPL

    ; (IP) -> W
    ldy	#1
    lda	(IP), y
    sta	TMP + 1
    dey
    lda	(IP), y
    sta	TMP

    ; IP += 2
    lda	IP
    clc
    adc	#2
    sta	IP
    bcc +
    inc	IP + 1
+   jmp	(TMP)

; START - points to the code of the startup word.
    +BACKLINK
    !byte 5
    !text	"start"
    +VALUE	_START
_START
    !word	0
    !word	QUIT

; DROP
    +BACKLINK
    !byte	4
    !text	"drop"
DROP
    inx
    inx
    +NEXT

; SWAP
    +BACKLINK
    !byte	4
    !text	"swap"
SWAP
    ldy	1, x
    lda	3, x
    sta 1, x
    sty	3, x

    ldy	0, x
    lda	2, x
    sta 0, x
    sty	2, x
    +NEXT

!macro _DUP {
    dex
    dex
    lda	3, x
    sta	1, x
    lda	2, x
    sta	0, x
}

; DUP
    +BACKLINK
    !byte	3
    !text	"dup"
DUP
    +_DUP
    +NEXT

; OVER
    +BACKLINK
    !byte	4
    !text	"over"
OVER
    dex
    dex

    lda	5, x
    sta	1, x
    lda	4, x
    sta	0, x

    +NEXT

; 1+
    +BACKLINK
    !byte	2
    !text	"1+"
INCR
    inc 0, x
    bne +
    inc 1, x
+   +NEXT

; 1-
    +BACKLINK
    !byte	2
    !text	"1-"
DECR
    lda 0, x
    bne +
    dec 1, x
+   dec 0, x
    +NEXT

; +
    +BACKLINK
    !byte	1
    !text	"+"
    lda	0, x
    clc
    adc 2, x
    sta	2, x

    lda	1, x
    adc 3, x
    sta 3, x

    inx
    inx
    +NEXT

; -
    +BACKLINK
    !byte	1
    !text	"-"
SUB
    lda	2, x
    sec
    sbc 0, x
    sta	2, x

    lda 3, x
    sbc 1, x
    sta 3, x

    inx
    inx

    +NEXT

product = TMP

    +BACKLINK
    !byte	2
    !text	"d*"
    jsr DMUL
    +NEXT
; wastes TMP, TMP2, y
DMUL
    lda #$00
    sta product+2 ; clear upper bits of product
    sta product+3 
    ldy #$10 ; set binary count to 16 
.shift_r
    lsr 3, x ; multiplier+1 ; divide multiplier by 2 
    ror 2, x ; multiplier
    bcc rotate_r 
    lda product+2 ; get upper half of product and add multiplicand
    clc
    adc 0, x ; multiplicand
    sta product+2
    lda product+3 
    adc 1, x ; multiplicand+1
rotate_r 
    ror ; rotate partial product 
    sta product+3 
    ror product+2
    ror product+1 
    ror product 
    dey
    bne .shift_r 

    lda	product
    sta	0, x
    lda	product + 1
    sta	1, x
    lda	product + 2
    sta	2, x
    lda	product + 3
    sta	3, x
    rts

!src "ummod.a"

    +BACKLINK
    !byte	1
    !text	"="
    ldy #0
    lda	0, x
    cmp	2, x
    bne	+
    lda	1, x
    cmp	3, x
    bne	+
    ldy	#$ff
+   inx
    inx
    sty 1, x
    sty	0, x
    +NEXT

; <
    +BACKLINK
    !byte	1
    !text	"<"
LT
    ldy #0
    lda	1, x
    cmp	3, x
    bcc .false
    bne	.true
    ; ok, msb are equal...
    lda	2, x
    cmp	0, x
    bcs	.false
.true
    ldy	#$ff
.false
    inx
    inx
    sty	1, x
    sty	0, x
    +NEXT

; 0=
    +BACKLINK
    !byte	2
    !text	"0="
ZEQU
    ldy #0
    lda 1, x
    bne +
    lda 0, x
    bne +
    ldy #$ff
+   sty 1, x
    sty 0, x
    +NEXT

; AND
    +BACKLINK
    !byte	3
    !text	"and"
    lda	1, x
    and 3, x
    sta 3, x

    lda	0, x
    and 2, x
    sta 2, x

    inx
    inx

    +NEXT

; !
    +BACKLINK
    !byte	1
    !text	"!"
STORE
    lda	2, x
    sta (0, x)
    inc	0, x
    bne	+
    inc	1, x
+
    lda	3, x
    sta	(0, x)

    inx
    inx
    inx
    inx
    +NEXT

; @
    +BACKLINK
    !byte	1
    !text	"@"
FETCH
    lda	(0, x)
    tay
    inc	0, x
    bne +
    inc 1, x
+
    lda (0, x)
    sta	1, x
    sty	0, x

    +NEXT

; C!
    +BACKLINK
    !byte	2
    !text	"c!"
STOREBYTE
    lda	2, x
    sta (0, x)

    inx
    inx
    inx
    inx

    +NEXT

; C@
    +BACKLINK
    !byte	2
    !text	"c@"
FETCHBYTE
    lda	(0, x)
    sta 0, x
    ldy #0
    sty	1, x
    +NEXT

; FILL ( val start len -- )
    +BACKLINK
    !byte	4
    !text	"fill"
FILL
    lda	4, x
    sta	.fsrc
    lda	2, x
    sta	.fdst
    lda	3, x
    sta	.fdst + 1
    lda	0, x
    eor	#$ff
    sta	TMP
    lda	1, x
    eor	#$ff
    sta	TMP + 1

    inx
    inx
    inx
    inx
    inx
    inx
-
    inc	TMP
    bne	+
    inc	TMP + 1
    bne	+
    +NEXT
+
.fsrc = * + 1
    lda	#0 ; overwrite
.fdst = * + 1
    sta	$ffff ; overwrite

    ; advance
    inc	.fdst
    bne	-
    inc	.fdst + 1
    bne	-

; CMOVE> ( src dst len -- )
    +BACKLINK
    !byte	6
    !text	"cmove>"
CMOVE_BACK
    lda	4, x
    sta	.bsrc + 1
    lda	5, x
    sta	.bsrc + 2
    lda	2, x
    sta	.bdst + 1
    lda	3, x
    sta	.bdst + 2
    lda	0, x
    eor	#$ff
    sta	TMP
    lda	1, x
    eor	#$ff
    sta	TMP + 1

    inx
    inx
    inx
    inx
    inx
    inx
-
    inc	TMP
    bne	+
    inc	TMP + 1
    bne	+
    +NEXT
+
.bsrc
    lda	$ffff ; overwrite
.bdst
    sta	$ffff ; overwrite

    ; back
    dec	.bsrc + 1
    lda	.bsrc + 1
    cmp	#$ff
    bne	+
    dec	.bsrc + 2
+
    dec	.bdst + 1
    lda	.bdst + 1
    cmp	#$ff
    bne	+
    dec	.bdst + 2
+
    bne	-

; CMOVE ( src dst len -- ) forward move
    +BACKLINK
    !byte	5
    !text	"cmove"
CMOVE
    lda	4, x
    sta	.csrc + 1
    lda	5, x
    sta	.csrc + 2
    lda	2, x
    sta	.cdst + 1
    lda	3, x
    sta	.cdst + 2
    lda	0, x
    eor	#$ff
    sta	TMP
    lda	1, x
    eor	#$ff
    sta	TMP + 1

    inx
    inx
    inx
    inx
    inx
    inx
-
    inc	TMP
    bne	+
    inc	TMP + 1
    bne	+
    +NEXT
+
.csrc
    lda	$ffff ; overwrite
.cdst
    sta	$ffff ; overwrite

    ; advance
    inc	.csrc + 1
    bne	+
    inc	.csrc + 2
+
    inc	.cdst + 1
    bne	+
    inc	.cdst + 2
+
    bne	-

; ---------- variables

; S0
    +BACKLINK
    !byte 3
    !text	"sp0"
    +VALUE	STACK_START

; STATE - Is the interpreter executing code (0) or compiling a word (non-zero)?
    +BACKLINK
    !byte 5
    !text	"state"
STATE = * + 1
    +VALUE	0

; COMPILE_RAM - points to RAM source code to be interpreted.
    +BACKLINK
    !byte 11
    !text	"compile-ram"
    +VALUE	COMPILE_RAM
COMPILE_RAM
    !word	0

; HERE - points to the next free byte of memory. When compiling, compiled words go here.
    +BACKLINK
    !byte 4
    !text	"here"
HERE_LSB = * + 1
HERE_MSB = * + 3
    +VALUE	_LATEST + 2

; NEXT
    +BACKLINK
    !byte 4
    !text	"next"
    +VALUE	NEXT_IMPL

; ------------ i/o

; EMIT
    +BACKLINK
    !byte	4
    !text	"emit"
EMIT
    lda	0, x
    inx
    inx
    jsr	PUTCHR
    +NEXT

TIB
TIB_LENGTH
    !byte 0
MAX_TIB_LENGTH = 20
TIB_DATA
    !fill MAX_TIB_LENGTH

tmp_x
    !byte	0

; KEY... read a key from disk (if open) or keyboard.
    +BACKLINK
    !byte	3
    !text	"key"
KEY
    jsr	_KEY
    dex
    dex
    sta	0, x
    lda	#0
    sta	1, x
    +NEXT

.unbuffered_key
    stx	tmp_x
    jsr	PULL_KEY ; read from disk/ram/console
    ldx tmp_x
    ora	#0
    beq	_KEY
    rts

_KEY
    ; buffered key input
KEY_BUF_READ_POS = * + 1
-
    lda BASIC_INPUT_BUFFER
    beq +
    inc KEY_BUF_READ_POS ; found buffered char, return it
    rts
+
    lda KEY_BUF_READ_POS
    bne +

    lda COMPILE_FILENO
    ora COMPILE_RAM + 1
PREVENT_BASIC_GETLINE = * + 1
    ora	#1
    bne	.unbuffered_key

    ; Buffered line input.
    txa
    pha
    lda 1
    pha
    ora #3 ; Makes sure basic is switched in.
    sta 1
    jsr $a560 ; Input line into BASIC_INPUT_BUFFER.
    pla
    sta 1
    pla
    tax
    jmp -
+
    lda #0 ; finish reading line, setup next line
    sta KEY_BUF_READ_POS
    sta BASIC_INPUT_BUFFER
    lda #K_RETURN
    rts

; Reads a key, sources are prioritized as follows:
;  1. Streaming file from disk (COMPILE_FILENO)
;  2. Compile RAM area (COMPILE_RAM)
;  3. Console input
PULL_KEY ; wastes x!!!
    lda	COMPILE_FILENO
    bne	.get_char_from_disk

    ; Compiling from RAM?
    lda	COMPILE_RAM + 1
    beq	.read_from_console
    ; yes - get char from RAM area
    inc $d020
    sta	TMP + 1
    lda	COMPILE_RAM
    sta	TMP
    ldy #0
    dec $d020
    lda	(TMP), y
    beq	.ram_compile_done
    inc	COMPILE_RAM
    bne	+
    inc	COMPILE_RAM + 1
+   rts
.ram_compile_done
    sta	COMPILE_RAM + 1  ; Turns off RAM compilation.
.read_from_console
    jmp	GETCHR

.get_char_from_disk
    inc $d020
    jsr	READST
    bne .eof
    dec $d020
    jmp	CHRIN

.eof
    lda	COMPILE_FILENO
    jsr	CLOSE
    dec $d020

    dec	COMPILE_FILENO
    bne +
+
    lda	COMPILE_FILENO
    jsr	CHKIN
    jmp PULL_KEY  ; Try again.
    
; WORD ( -- strptr )
    +BACKLINK
    !byte	4
    !text	"word"
WORD
    jsr _WORD
    +NEXT

_WORD
    ; prepare text input
    lda	#0
    sta	TIB_LENGTH
    
.get_key
    jsr	_KEY

    cmp #K_RETURN
    beq .word_end
    cmp #K_SPACE
    beq .word_end
    cmp #(K_SPACE|$80)
    beq .word_end

    ldy TIB_LENGTH
    sta TIB_DATA,y
    iny
    sty TIB_LENGTH
    tya
    cmp #MAX_TIB_LENGTH
    bne .get_key

.word_end
    lda	TIB_LENGTH
    beq .get_key ; Nothing entered yet, try again.

    dex
    dex

    lda	#<TIB
    sta	0, x
    lda	#>TIB
    sta	1, x

    rts

; FIND
    +BACKLINK
    !byte	4
    !text	"find"
FIND
    jsr	_FIND
    +NEXT
_FIND
    txa
    pha

    lda	_LATEST
    sta	TMP
    lda	_LATEST + 1
    sta	TMP + 1
    ; TMP now contains pointer to the most recently defined dictionary word.

    lda	1, x
    sta	TMP2 + 1
    lda	0, x
    sta	TMP2 ; TMP2 contains pointer to find string

    ldy	#0
    lda	(TMP2), y ; get length of find string
    ; store findlen
    sta	.findlen + 1
    sta	.findlen2 + 1

    ; TMP2 -= 2. This prepares for .string_compare.
    lda TMP2
    bne +
    dec TMP2 + 1
+   dec TMP2
    lda TMP2
    bne +
    dec TMP2 + 1
+   dec TMP2

.examine_word
    ldy	#2
    lda	(TMP), y ; get string length of dictionary word
    and	#STRLEN_MASK | F_HIDDEN ; include hidden flag... so we don't find the hidden words.
.findlen
    cmp	#0
    beq	.string_compare

.word_not_equal
    ; no match, advance the linked list.
    ldy	#0
    lax	(TMP), y
    iny
    lda	(TMP), y
    sta	TMP + 1
    stx	TMP
    ; TMP now contains new dictionary word.

    ; Is word null? If not, examine it.
    bne .examine_word

    ; It is null - give up.
    pla
    tax
    lda #0
    sta	0, x
    sta	1, x
    rts
    
.string_compare
    ; equal strlen, now compare strings...
.findlen2
    lda #0
    sta .strlen
-   iny
    lda	(TMP), y ; get char of dictionary string
    cmp	(TMP2), y ; compare with find string
    bne	.word_not_equal
    dec	.strlen
    beq	.word_is_equal
    jmp	-

.strlen !byte 0
    
.word_is_equal
    ; return address to dictionary word
    pla
    tax
    lda	TMP
    sta	0, x
    lda	TMP + 1
    sta	1, x
    rts ; a should be non-zero now

; >CFA
    +BACKLINK
    !byte	4
    !text	">cfa"
TCFA
    jsr _TCFA
    +NEXT
_TCFA
    lda	1, x
    sta	TMP + 1
    lda	0, x
    sta TMP
    ; TMP contains pointer to word
    ldy	#2
    lda	(TMP), y ; a contains string length + mask
    and	#STRLEN_MASK
    clc
    adc	#3 ; offset for link + string length
    sta	.addend + 1
    lda	0, x
.addend
    adc	#0
    sta	0, x
    bcc	+
    inc	1, x
+
    rts

; EXECUTE
    +BACKLINK
    !byte	7
    !text	"execute"
EXECUTE
    lda	0, x
    sta TMP
    lda	1, x
    sta	TMP + 1
    inx
    inx
    jmp	(TMP)

!src "number.a"

    +BACKLINK
    !byte 7 | F_IMMED
    !text "literal"
LITERAL
    dex
    dex
    lda 3,x
    bne +
    lda #<LITC
    sta 0,x
    lda #>LITC
    sta 1,x
    jsr _COMMA ; writes LITC
    jmp CCOMMA ; writes byte
+
    lda #<LIT
    sta 0, x
    lda #>LIT
    sta 1, x
    jsr _COMMA ; writes LIT
    jmp COMMA ; writes number

; INTERPRET
    +BACKLINK
    !byte	9
    !text	"interpret"
INTERPRET
    ; Checks for stack underflow.
    txa
    cmp #STACK_START+1
    bpl .on_stack_underflow

    lda #0
    sta PREVENT_BASIC_GETLINE
    jsr	_WORD ; push string to stack
    inc PREVENT_BASIC_GETLINE

    +_DUP
    jsr	_FIND ; replace string with dictionary ptr
    bne	.found_word

    inx ; drop
    inx
    jsr READ_NUMBER
    beq .was_number

    jmp .on_word_not_found_error

    ; yep, it's a number...
.was_number
    lda	STATE ; are we compiling?
    bne	LITERAL ; yes, compile the number
    +NEXT

.on_stack_underflow
    lda	#$12 ; reverse on
    jsr	PUTCHR
    lda #'e'
    jsr	PUTCHR
    lda #'r'
    jsr	PUTCHR
    jmp .stop_error_print

.found_word
    ; OK, we found a word...

    ; is it immediate?
    lda	0, x
    sta	TMP
    lda	1, x
    sta	TMP + 1
    ldy	#2 ; skip link ptr, look at flags
    lda	(TMP), y
    and	#F_IMMED
    bne	.execute_word ; yes... execute it.

    lda	STATE ; are we compiling?
    beq	.execute_word ; no, execute it.

    ; OK, this word should be compiled...
    jsr	_TCFA
    jsr	_COMMA
    inx ; drop string
    inx
    +NEXT

.execute_word
    jsr	_TCFA
    lda 0,x
    sta 2,x
    lda 1,x
    sta 3,x
    inx
    inx
    jmp EXECUTE

.on_word_not_found_error
    lda	#$12 ; reverse on
    jsr	PUTCHR

    ldy	#0
-   lda	TIB_DATA, y
    jsr	PUTCHR
    iny
    dec TIB_LENGTH
    bne -

    lda	#'?'
.stop_error_print
    jsr	PUTCHR

    lda	#$92 ; reverse off
    jsr	PUTCHR

    lda	#$d ; cr
    jsr	PUTCHR

    ; Resets some sensitive things, as part of error handling.
    ldx     #0
    stx     STATE
    stx     BASIC_INPUT_BUFFER
    stx     KEY_BUF_READ_POS
    stx     COMPILE_FILENO
    stx     COMPILE_RAM + 1
    jsr     CHKIN
    ldx     #STACK_START ; wipe stack :(
    +NEXT

; TICK
    +BACKLINK
    !byte	1
    !text	"'"
TICK
    ; tick and lit do the same thing, but tick is used for
    ; words, lit for numbers.
    jmp	LIT

    +BACKLINK
    !byte	4
    !text	"litc"
LITC
    dex
    dex

    ; copy literal to stack
    ldy	#0
    lda	(IP), y
    sta	0, x
    sty	1, x

    inc IP
    bne +
    inc	IP + 1
+   +NEXT

; LIT
    +BACKLINK
    !byte	3
    !text	"lit"
LIT
    ; grow stack
    dex
    dex

    ; copy literal to stack
    ldy	#0
    lda	(IP), y
    sta	0, x

    iny
    lda	(IP), y
    sta	1, x

    ; IP += 2
    clc
    lda	IP
    adc #2	
    bcc	+
    inc	IP + 1
+   sta	IP

    +NEXT

; QUIT
    +BACKLINK
    !byte	4
    !text	"quit"
QUIT
    jsr	__DOCOL
    !word	INTERPRET
    !word	BRANCH
    !word	* - 4

; EXIT
    +BACKLINK
    !byte	4
    !text	"exit"
EXIT
    pla
    sta	IP + 1
    pla
    sta	IP
    +NEXT

    +BACKLINK
    !byte   2
    !text	"2*"
    asl 0, x
    rol 1, x
    +NEXT

; HEADER ( name -- )
    +BACKLINK
    !byte	6
    !text	"header"
HEADER
    jsr	_WORD

    ; store link in header. TMP = dst
    lda	HERE_LSB
    sta	TMP
    lda	HERE_MSB
    sta	TMP + 1

    ldy	#0
    lda	_LATEST
    sta	(TMP), y

    inc	TMP
    bne	+
    inc	TMP + 1
+
    lda	_LATEST + 1
    sta	(TMP), y

    inc	TMP
    bne	+
    inc	TMP + 1
+

    ; copy length byte + string
-   lda	TIB, y
    sta	(TMP), y
    iny
    dec TIB_LENGTH
    bpl	-

    ; update _LATEST
    lda	HERE_LSB
    sta	_LATEST
    lda	HERE_MSB
    sta	_LATEST + 1
    
    ; update HERE
    tya
    ldy	TMP + 1
    clc
    adc	TMP
    sta	HERE_LSB
    bcc	+
    iny
+   sty HERE_MSB

    inx
    inx

    +NEXT

; CCOMMA - write char
    +BACKLINK
    !byte	2
    !text	"c,"
CCOMMA
    lda	HERE_LSB
    sta	TMP
    lda	HERE_MSB
    sta	TMP + 1

    ldy	#0
    lda	0, x
    sta	(TMP), y

    ; update HERE
    inc	HERE_LSB
    bne	+
    inc HERE_MSB
+
    inx
    inx
    +NEXT

; COMMA - write word
    +BACKLINK
    !byte	1
    !text	","
COMMA
    jsr	_COMMA
    +NEXT
_COMMA
    lda	HERE_LSB
    sta	TMP
    lda	HERE_MSB
    sta	TMP + 1

    ldy	#0
    lda	0, x
    sta	(TMP), y
    iny
    lda	1, x
    sta	(TMP), y

    ; update HERE
    lda	HERE_LSB
    clc
    adc	#2
    sta	HERE_LSB
    bcc	+
    inc HERE_MSB
+
    inx
    inx
    rts

; LBRAC
    +BACKLINK
    !byte	1 | F_IMMED
    !text	"["
LBRAC
    lda	#0
    sta	STATE
    +NEXT

; RBRAC
    +BACKLINK
    !byte	1
    !text	"]"
RBRAC
    lda	#1
    sta	STATE
    +NEXT

; SEMICOLON
    +BACKLINK
    !byte	1 | F_IMMED
    !text	";"
SEMICOLON
    jsr	__DOCOL
    !word LIT, EXIT, COMMA ; append EXIT (so that the word will return).
    !word LATEST, FETCH, HIDDEN ; unhide the word.
    !word LBRAC ; go back to IMMEDIATE mode.
    !word EXIT

; IMMEDIATE. Flip the immediate flag of the LATEST word.
    +BACKLINK
    !byte	5 | F_IMMED
    !text	"immed"
IMMED
    lda	_LATEST
    sta	TMP
    lda	_LATEST + 1
    sta	TMP + 1
    ldy	#2
    lda	(TMP), y
    eor	#F_IMMED
    sta	(TMP), y
    +NEXT

    !word	LINK
    !set	LINK = * - 2
    !byte	6
    !text	"dodoes"
    pla
    sta TMP
    pla
    sta TMP + 1
    tay

    ; push data pointer to param stack
    dex
    dex
    clc
    lda TMP
    adc #3
    sta 0,x
    bcc +
    iny
+   sty 1,x

    ; behavior pointer => IP
    lda IP
    pha
    lda IP + 1
    pha
    ldy #2
    lda (TMP),y
    sta IP + 1
    dey
    lda (TMP),y
    sta IP
    +NEXT

    +BACKLINK
    !byte	2
    !text	"r>"
    dex
    dex
    pla
    sta 1,x
    pla
    sta 0,x
    +NEXT

    +BACKLINK
    !byte	2
    !text	">r"
    lda 0,x
    pha
    lda 1,x
    pha
    inx
    inx
    +NEXT

    +BACKLINK
    !byte	6
    !text	"branch"
BRANCH
    ; IP is now pointing to what IP should be changed to.
    ldy	#0
    lda	(IP), y
    sta	TMP
    iny
    lda	(IP), y
    sta IP + 1

    lda	TMP
    sta	IP

    +NEXT

; 0BRANCH
    +BACKLINK
    !byte	7
    !text	"0branch"
ZBRANCH
    lda	1, x
    ora	0, x
    bne .dont_branch
    inx
    inx
    jmp BRANCH

.dont_branch
    inx
    inx
    ; skip offset
    lda	IP
    clc
    adc	#2
    sta	IP
    bcc	+
    inc	IP + 1
+
    +NEXT
    
    +BACKLINK
    !byte 6
    !text	"docol,"
DOCOLCOMMA
    jsr	__DOCOL
    !word LIT, OP_JSR, CCOMMA ; insert jmp
    !word LIT, __DOCOL, COMMA ; append __DOCOL (the codeword)
    !word EXIT

; COLON
    +BACKLINK
    !byte	1
    !text	":"
COLON
    jsr	__DOCOL
    !word HEADER ; make the dictionary entry / header
    !word DOCOLCOMMA
    !word LATEST, FETCH, HIDDEN ; hide word
    !word RBRAC ; enter compile mode
    !word EXIT

; HIDDEN
    +BACKLINK
    !byte	6
    !text	"hidden"
HIDDEN
    lda	0, x
    sta	TMP
    lda	1, x
    sta TMP + 1

    ldy	#2 ; skip link, point to flags
    lda	(TMP), y
    eor	#F_HIDDEN ; toggle hidden flag
    sta	(TMP), y
    inx
    inx
    +NEXT

; SP@
    +BACKLINK
    !byte	3
    !text	"sp@"
SPFETCH
    txa
    dex
    dex
    sta	0, x
    lda	#0
    sta	1, x
    +NEXT

; -----------

; Active file stream to compile from.
COMPILE_FILENO
    !byte	0

; CLOSEW ( file# -- )
    +BACKLINK
    !byte 6
    !text	"closew"
CLOSEW
    lda 0,x
    sta TMP
    stx	TMP2
    jsr	CLOSE 
    ldx	TMP
    jsr	CHKOUT
    jsr	_errorchread
    ldx TMP2
    inx
    inx
    +NEXT

_errorchread
        LDA #$00      ; no filename
        LDX #$00
        LDY #$00
        JSR SETNAM
        LDA #$0F      ; file number 15
        LDX $BA       ; last used device number
        BNE +
        LDX #$08      ; default to device 8
+	    LDY #$0F      ; secondary address 15 (error channel)
        JSR SETLFS

        JSR OPEN
        BCS .error    ; if carry set, the file could not be opened

        LDX #$0F      ; filenumber 15
        JSR CHKIN     ; file 15 now used as input

        LDY #$00
.loop   JSR READST    ; read status byte
        BNE geof      ; either EOF or read error
        JSR CHRIN     ; get a byte from file
        JSR CHROUT    ; print byte to screen
        JMP .loop     ; next byte

geof
.glose
        LDA #$0F      ; filenumber 15
        JSR CLOSE

        LDX #$00      ; filenumber 0 = keyboard
        JSR CHKIN     ; keyboard now input device again
        RTS
.error
        ; Akkumulator contains BASIC error code

        ; most likely error:
        ; A = $05 (DEVICE NOT PRESENT)

        ; ... error handling for open errors ...
        JMP .glose    ; even if OPEN failed, the file has to be closed


; LOADB ( filenameptr filenamelen dst -- status ) load binary file
;  - s" base" 7000 loadb #load file to 7000
;  - end of loaded file is available in $ae/$af afterwards
    +BACKLINK
    !byte 5
    !text	"loadb"
LOADB
    txa
    pha

    lda 1, x		; >destination
    sta load_binary_laddr_hi
    lda 0, x		; <destination
    sta load_binary_laddr_lo

    lda 2, x		; a filename length
    pha
    ldy 5, x 		; y >basename 
    lda 4, x		; x <basename 
    tax
    pla
    jsr	load_binary
    
    pla
    tax

    inx
    inx
    inx
    inx
    lda	load_binary_status
    sta	1, x
    sta	0, x
    beq	+
    txa
    pha
    jsr	_errorchread
    pla
    tax
+
    +NEXT

load_binary_status
    !byte	0

;load_binary_base
;	lda	#basename_end - basename
;	ldx	#<basename
;	ldy	#>basename
;	; fall through...

load_binary
    jsr .disk_io_setnamsetlfs

load_binary_laddr_lo = *+1
    ldx #$ff	;<load_address
load_binary_laddr_hi = *+1
    ldy #$ff	;>load_address
    lda #0		;0 = load to memory (no verify)
    sta	load_binary_status
    jsr LOAD
    bcs .disk_io_error
    ldx #$00      ; filenumber 0 = keyboard
    jmp CHKIN     ; call CHKIN (keyboard now input device again)

.disk_io_setnamsetlfs ;reused by both loadb and saveb
    jsr SETNAM
    lda $ba		;last used device number
    and #3		;Make 0-3 possible numbers
    ora #8		;Transform to 8-B
    tax
    lda #1
    ldy #0		;if load: 0 = load to new address, if save: 0 = dunno, but okay... 
    jmp SETLFS	;End with JMP instead of jsr/rts to save a jsr/rts pair...

.disk_io_error
    ; Accumulator contains BASIC error code
    
    ;... error handling ...
    ldx #$00      ; filenumber 0 = keyboard
    jsr CHKIN     ; call CHKIN (keyboard now input device again)
    lda	#1
    sta	load_binary_status
    rts

; SAVEB (save binary file)
;  - 7000 71ae s" base" saveb #save file from 7000 to 71ae (= the byte AFTER the last byte in the file)
    +BACKLINK
    !byte 5
    !text	"saveb"
SAVEB
    stx tmp_x

    lda	$ae
    pha
    lda	$af
    pha

    lda 6, x		; range begin lo
    sta $c1
    lda 7, x		; range begin hi
    sta $c2
    
    lda 4, x		; range end lo
    sta save_binary_srange_end_lo
    lda 5, x		; range end hi
    sta save_binary_srange_end_hi

    lda 0, x		; a filename length
    pha
    ldy 3, x 		; y basename hi
    lda 2, x		; x basename lo
    tax
    pla

    jsr .disk_io_setnamsetlfs
    
    ;This should point to the byte AFTER the last byte in the file.
save_binary_srange_end_lo = *+1
    ldx #$ff	;load_address lo
save_binary_srange_end_hi = *+1
    ldy #$ff	;load_address hi
    lda #$c1	;tell routine that start address is located in $c1/$c2
    jsr SAVE
    bcs .disk_io_error

    pla
    sta	$af
    pla
    sta	$ae

    ldx tmp_x
    inx
    inx
    inx
    inx
    inx
    inx
    inx
    inx
    +NEXT

; OPENW ( strptr strlen file# ) open file for writing
    +BACKLINK
    !byte 5
    !text	"openw"
OPENW
    lda 0,x
    sta TMP ; fileno
    stx	TMP2

    lda	2, x
    ldy	5, x
    pha
    lda	4, x
    tax
    pla
    
    jsr	SETNAM
    lda	TMP ; file number
    ldx	$ba ; last used device#
    tay ; secondary address
    jsr	SETLFS
    jsr	OPEN
    bcc	+
    jsr .close
    jmp ++
+
    ldx	TMP ; file number
    jsr	CHKOUT
++
    ldx	TMP2
    inx
    inx
    inx
    inx
    inx
    inx
    +NEXT

.close
    lda $b8 ; current file
    jsr CLOSE
    jmp CLRCHN

; LOAD_AND_COMPILE (load and compile source file)
    +BACKLINK
    !byte 4
    !text	"load"
LOAD_AND_COMPILE
    txa
    pha

    lda	0, x
    ldy	3, x
    pha
    lda	2, x
    tax
    pla

    ; open file
    ; a = filename length
    ; y = basename hi
    ; x = basename lo
    jsr	SETNAM
    inc	COMPILE_FILENO
    lda	COMPILE_FILENO ; file number
    ldx	$ba ; last used device#
    tay
    iny ; secondary address
    jsr	SETLFS
    jsr	OPEN
    bcc	+
    dec COMPILE_FILENO
    jsr .close
    jmp ++
+
    ldx	COMPILE_FILENO ; file number
    jsr	CHKIN

    ; Skips load address. It is tempting to keep the source
    ; code as .SEQ files instead of .PRG to avoid this step.
    ; The drawback with that is that one would have to type
    ; ." foo,s" load instead of ." foo" load.
    JSR CHRIN     ; get a byte from file
    JSR CHRIN     ; get a byte from file
++
    pla
    tax
    inx
    inx
    inx
    inx
    +NEXT

; LATEST - points to the most recently defined dictionary word.
    +BACKLINK
    !byte 6
    !text	"latest"
LATEST
    +VALUE	_LATEST
_LATEST
    !word	LINK

; ALL CONTENTS BELOW LATEST WILL BE OVERWRITTEN!!!

load_base
    ; loads base.fs to $5000
    lda #0
    sta load_binary_laddr_lo
    sta COMPILE_RAM
    lda #$50
    sta load_binary_laddr_hi
    sta COMPILE_RAM + 1
    ldx	#<basename
    ldy	#>basename
    lda	#basename_end - basename
    jsr load_binary
    ; Null terminates source code.
    lda #0
    tay
    sta ($ae),y
    rts

basename
!text	"base"
basename_end
