;The MIT License
;
;Copyright (c) 2013 Johan Kotlinski
;
;Permission is hereby granted, free of charge, to any person obtaining a copy
;of this software and associated documentation files (the "Software"), to deal
;in the Software without restriction, including without limitation the rights
;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;copies of the Software, and to permit persons to whom the Software is
;furnished to do so, subject to the following conditions:
;
;The above copyright notice and this permission notice shall be included in
;all copies or substantial portions of the Software.
;
;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
;THE SOFTWARE.

; Methods for number parsing

; base is single-byte variable.
; allowed values: 10, 16
    +BACKLINK
	!byte 4
	!text	"base"
BASE
	+VAR_CODE	_BASE
_BASE
    !word 16

; Z = success, NZ = fail
; success: ( string ptr -- number )
; fail: ( string ptr -- string ptr )
READ_NUMBER
	lda	1, x	
	sta	TMP3 + 1
	lda	0, x	
	sta	TMP3
    ; TMP3 now points to string length
    ; followed by string.

    ldy #0
	lda	(TMP3), y
	sta	.chars_to_process

    dex
    dex
    dex
    dex

    sty 0,x
    sty 1,x

.read_digit
	; TMP *= _BASE
    lda _BASE
    sta 2,x
    lda _BASE+1
    sta 3,x
    jsr DMUL
    lda 2,x
    bne .parse_failed ; overflow!

	; add *(++TMP3)
    inc TMP3
    bcc +
    inc TMP3+1
+   lda	(TMP3), y
	clc
	adc	#-$30 ; petscii 0-9 -> 0-9

	sec ; within 0-9?
	cmp	#10
	bcc	+

	clc
	adc	#-$7 ; a-f..?

	sec
	cmp	#10
	bcc	.parse_failed

+   sec
    cmp _BASE
    bcs .parse_failed

    adc 0,x
    sta 0,x
    bcc +
    inc 1,x
    beq .parse_failed
+
    dec .chars_to_process
    bne .read_digit

    ; successful parse!
    lda 0,x
    sta 4,x
    lda 1,x
    sta 5,x
    inx
    inx
    inx
    inx
    tya ; clear Z flag
    rts

.parse_failed
    inx
    inx
    inx
    inx ; Z flag set
    rts

.chars_to_process
!byte 0

