: hex 16 base ! ;
: dec 10 base ! ;
hex
: bl 20 ;
: cr d emit ;
: space bl emit ;
: / /mod swap drop ;
: mod /mod drop ;
: negate 0 swap - ;
: bg d020 c! ;
: literal immed ' lit , , ;
: '(' [ char ( ] literal ;
: ')' [ char ) ] literal ;
: '"' [ char " ] literal ;
: ':' [ char : ] literal ;
: ';' [ char ; ] literal ;
: [compile] immed word find >cfa , ;
: if immed ' 0branch , here @ 0 , ;
: then immed dup here @ swap - swap ! ;
: else immed ' branch , here @ 0 , swap dup here @ swap - swap ! ;
: green 5 bg ;
: yellow 7 bg ;
: begin immed here @ ;
: until immed ' 0branch , here @ - , ;
: again immed ' branch , here @ - , ;
: while immed ' 0branch , here @ 0 , ;
: repeat immed ' branch , swap here @ - , dup here @ swap - swap ! ;
: unless immed ' not , [compile] if ;
: recurse immed latest @ >cfa , ;
: incbg d020 c@ 1+ d020 c! ;
: decbg d020 c@ 1- d020 c! ;
: ( immed begin key ')' = until ;
: cc begin incbg 0 until ;
: nip ( x y -- y ) swap drop ;
: tuck ( x y -- y x y ) dup rot ;
: pick ( x_u ... x_1 x_0 u -- x_u ... x_1 x_0 x_u ) 1+ 2 negate * dsp@ + @ ;
: <> ( n -- b ) = not ;
: > ( n -- b ) swap < ;
: 0> ( n -- b ) 0 > ;
: spaces ( n -- ) begin dup 0> while space 1- repeat drop ;
: ? ( addr -- ) @ . ;
: tell 
	dup c@ ( get strlen )
	begin 
		swap 1+ ( inc strptr )
		dup c@ emit ( print char )
		swap 1- ( dec strlen )
		dup 0= 
	until
;
: s" immed ( -- addr len )
	state @ if
		' litstring ,
		here @ ( save addr of length byte on stack )
		0 c, ( dummy length - we don't know what it is yet )
		begin
			key
			dup '"' <>
		while
			c,
		repeat
		drop
		dup
		here @ swap -
		1- ( subtract to compensate for length byte )
		swap c!
	else ( immediate mode )
		here @
		begin
			key
			dup '"' <>
		while
			over c!
			1+
		repeat
		drop
		here @ -
		here @
		swap
	then
;
: ." immed ( -- )
	state @ if ( compiling? )
		[compile] s"
		' tell ,
	else
		( in immediate mode, just read and print chars )
		begin
			key
			dup '"' = if
				drop
				exit
			then
			emit
		again
	then
;

: case immed 0 ;
: of immed ' over , ' = , [compile] if ' drop , ;
: endof immed [compile] else ;
: endcase immed ' drop , begin ?dup while [compile] then repeat ;

: cfa>
	latest @ ( start at latest dictionary entry... )
	begin
		?dup ( while link ptr != 0 )
	while
		2dup swap ( cfa curr curr cfa )
		< if ( current dictionary entry < cfa ? )
			nip ( leave it on stack )
			exit
		then
		@ ( follow link ptr back )
	repeat
	drop
	0
;

: >dfa >cfa 1+ 1+ 1+ ;

: id.
	1+ 1+ ( skip over link ptr )
	dup c@
	3f and ( fix me... should a constant with length mask )
	begin
		dup 0>
	while
		swap 1+
		dup c@
		emit
		swap 1-
	repeat
	2drop
;

: ?hidden
	1+ 1+ ( skip link ptr )
	c@
	40 and
;

: ?immed
	1+ 1+ ( skip link ptr )
	c@
	80 and
;

: see
	word find
	here @
	latest @
	begin
		2 pick
		over
		<>
	while
		nip
		dup @
	repeat
	
	drop
	swap ( end-of-word start-of-word )

	':' emit space dup id. space
	dup ?immed if ." immed " then

	>dfa ( get data addr )

	begin
		2dup >
	while
		dup @
		cfa>
		id. space
		2 +
	repeat
	';' emit cr
	2drop
;

see tell
